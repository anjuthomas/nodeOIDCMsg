var JsonWebTokenError = require('./lib/JsonWebTokenError');
var NotBeforeError    = require('./lib/NotBeforeError');
var TokenExpiredError = require('./lib/TokenExpiredError');
var decode            = require('./decode');
var timespan          = require('./lib/timespan');
var jws               = require('jws');
var xtend             = require('xtend');
var message           = require('message');

module.exports = function (jwtSig, secretOrPublicKey, tokenProfile, otherOptions, callback) {
  message.verify(jwtSig, secretOrPublicKey, otherOptions, callback);
  var decoded = jws.decode(jwtSig, secretOrPublicKey, tokenProfile, otherOptions, callback);
  if (!decoded) { return callback(new JsonWebTokenError('invalid token')); }

  var header = decoded.header;
  
  if (!~otherOptions.algorithms.indexOf(header.alg)) {
    return done(new JsonWebTokenError('invalid algorithm'));
  }

  var valid;
  
  try {
    valid = jws.verify(jwtSig, header.alg, secretOrPublicKey);
  } catch (e) {
    return done(e);
  }
  
  if (!valid)
    return done(new JsonWebTokenError('invalid signature'));

  var payload = decoded.payload;

  //try parse the payload
  if(typeof payload === 'string') {
    try {
      var obj = JSON.parse(payload);
      if(typeof obj === 'object') {
        payload = obj;
      }
    } catch (e) { }
  }

  var payload = message.decode(payload, tokenProfile,callback);


  //return header if `complete` option is enabled.  header includes claims
  //such as `kid` and `alg` used to select the key within a JWKS needed to
  //verify the signature
  if (otherOptions.complete === true) {
    return {
      header: decoded.header,
      payload: payload,
      signature: decoded.signature
    };
  }
  
  return payload;
};
