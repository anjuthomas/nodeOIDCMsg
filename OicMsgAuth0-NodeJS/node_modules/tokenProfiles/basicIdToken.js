'use strict';

var jwt = require('jsonwebtoken');

function BasicIdToken(iss, sub, aud, iat, exp, nbf, jti){
    this.iss = iss;
    this.sub = sub;
    this.aud = aud;
    this.iat = iat;
    this.exp = exp;
    this.nbf = nbf;
    this.jti = jti
    this.validateRequiredFields();
};

BasicIdToken.prototype.standard_claims = {};

BasicIdToken.prototype.non_standard_claims = {};

BasicIdToken.prototype.verification_claims = {};

BasicIdToken.prototype.NoneAlgorithm = false;

BasicIdToken.prototype.options_to_payload = {
    'iss': 'iss',
    'sub': 'sub',
    'aud': 'aud',
    'iat': 'iat',
    'exp': 'exp',
    'nbf': 'nbf',
    'jti': 'jti',

};
  
BasicIdToken.prototype.options_for_objects = [
    'expiresIn',
    'notBefore',
    'noTimestamp',
    'audience',
    'issuer',
    'subject',
    'jwtid',
];

BasicIdToken.prototype.knownNonStandardClaims = {
    'knownNonStandardClaim' : 'knownNonStandardClaim',
};

BasicIdToken.prototype.claims_to_verify = {
    'iss': 'iss',
    'sub': 'sub',
    'aud': 'aud',
    'jti': 'jti',
};

BasicIdToken.prototype.validateRequiredFields = function(){
    if (this.iss && this.sub && this.aud && this.iat && this.exp && this.nbf && this.jti){
        console.log("Validated all standard fields")
    }else {
        throw new Error("You are missing a required parameter");
    }
};

BasicIdToken.prototype.addNonStandardClaims = function(nonStandardClaims){
    BasicIdToken.prototype.non_standard_claims = nonStandardClaims;
};

BasicIdToken.prototype.getStandardClaims = function(){
    BasicIdToken.prototype.standard_claims = { "iss" : this.iss, "sub" : this.sub, "aud" : this.aud, "iat": this.iat, "exp": this.exp, "nbf": this.nbf, "jti": this.jti};
    return BasicIdToken.prototype.standard_claims;         
};

BasicIdToken.prototype.getNonStandardClaims = function(nonStandardClaims){
    return BasicIdToken.prototype.non_standard_claims;
}; 

BasicIdToken.prototype.getVerificationClaims = function(nonStandardClaims){
    return BasicIdToken.prototype.verification_claims;
}; 

/* User explicitly wants to set None Algorithm attribute */
BasicIdToken.prototype.setNoneAlgorithm = function(boolVal){
    BasicIdToken.prototype.NoneAlgorithm = boolVal;
};

BasicIdToken.prototype.getNoneAlgorithm = function(boolVal){
    return BasicIdToken.prototype.NoneAlgorithm;
};

/* Support for different serialization and deserialiation types */
BasicIdToken.prototype.toJWT = function(secretOrPrivateKey, options){
    return jwt.sign(this, secretOrPrivateKey, options);
};

BasicIdToken.prototype.fromJWT = function(signedJWT, secretOrPrivateKey, claimsToVerify, options){

    this.validateRequiredVerificationClaims(claimsToVerify);
    return jwt.decode(signedJWT,secretOrPrivateKey, this, options);
};

BasicIdToken.prototype.validateRequiredVerificationClaims = function(claimsToVerify)
{
    Object.keys(BasicIdToken.prototype.claims_to_verify).forEach(function (key) {
        if (!claimsToVerify[key]) {
            throw new Error('Missing required verification claim: ' + key);
        }
      });  
    BasicIdToken.prototype.verification_claims = claimsToVerify;
};

BasicIdToken.prototype.toJSON = function(secretOrPrivateKey, options){
    // TODO
};

BasicIdToken.prototype.fromJSON = function(signedJWT, secretOrPrivateKey, options){
    // TODO
};

BasicIdToken.prototype.toUrlEncoded = function(secretOrPrivateKey, options){
    // TODO
};

BasicIdToken.prototype.fromUrlEncoded = function(signedJWT, secretOrPrivateKey, options){
    // TODO
};

module.exports = BasicIdToken;

